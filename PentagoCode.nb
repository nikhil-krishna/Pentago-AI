SetDirectory[NotebookDirectory[]]

player1Color = Red;
player2Color = Blue;
pieces = makeDisks[gameBoardPiecesInitial[]];
count = 0;

(* First element of piece is player who played it. 0 \[Rule] no player \
played, 1 \[Rule] player one played, 2 \[Rule] player two played *)

(* Returns player that played a certain piece *)

getPlayer[piece_] :=
 Return[piece[[1]]]

(* Returns center of piece *)
getCenter[piece_] :=
 Return[piece[[2]]]

(* Creates a piece given player and center *)

createPiece[player_, center_] :=
 Return[{player, center, 0.2}]

(* Returns center of a disk *)
getCenterDisk[disk_] :=
 Return[disk[[2, 1]]]

getColorDisk[disk_] :=
 Return[disk[[1]]]

(* This function gives all the initial values of the pieces on the gameboard *)

gameBoardPiecesInitial[] := Module[{listOfPieces = {}, i, j},
  (* Finds all centers needed *)
  For[i = 0.5, i <= 6, i++,
   For[j = 0.5, j <= 6, j++,
    (* Appends all pieces to a list *)
    
    AppendTo[listOfPieces, {0, {i, j}, 0.2}]
    ]
   ];
  Return[listOfPieces]
  ]

(* This function makes the gray gameboard *)

gameBoardBackground[] :=
 {Gray, Rectangle[{0, 0}, {6, 6}]}

(* Makes lines that divide the gameboard into 4 squares *)

dividerLines[] :=
 
 Return[{Line[{{0, 0}, {0, 6}}], Line[{{0, 6}, {6, 6}}], 
   Line[{{6, 6}, {6, 0}}], Line[{{6, 0}, {0, 0}}], Line[{{3, 0}, {3, 6}}], 
   Line[{{0, 3}, {6, 3}}]}]

(* This function takes a list of pieces and converts them to Disks *)

makeDisks[listOfPieces_] := Module[{diskList = {}, i, color},
  (* Goes through the list *)
  For[i = 1, i <= Length[listOfPieces], i++,
   (* Appends proper color disk for 0 *)
   If[listOfPieces[[i, 1]] == 0,
    AppendTo[diskList,
     {White, Disk[listOfPieces[[i, 2]], listOfPieces[[i, 3]]]}
     ],
    (* Appends proper color disk for 1 *)
    If[listOfPieces[[i, 1]] == 1,
     AppendTo[diskList,
      {player1Color, Disk[listOfPieces[[i, 2]], listOfPieces[[i, 3]]]}
      ],
     (* Appends proper color disk for 2 *)
     If[listOfPieces[[i, 1]] == 2,
      AppendTo[diskList,
       {player2Color, Disk[listOfPieces[[i, 2]], listOfPieces[[i, 3]]]}
       ]
      ]
     ]
    ]
   ];
  Return[diskList]
  ]

(* This function determines whether a point is in a disk *)

isIn[point_, diskWithColor_] :=
 
 Return[EuclideanDistance[diskWithColor[[2, 1]], point] <= 0.2]

(* This function takes a disk a certain color and makes it a different color *)

changeColor[disk_, color_] := Module[{},
  (* Returns disk of a different color *)
  
  Return[{color, Disk[disk[[2, 1]], disk[[2, 2]]]}]
  ]

(* This function ensures that a disk that needs to be inserted is inserted in \
the proper location *)

locationToBeInserted[disk_] := 
 Module[{centerOfDisk = getCenterDisk[disk], position},
  (* Gives needed position of disk *)
  
  position = Floor[centerOfDisk[[1]]]*6 + (Floor[centerOfDisk[[2]]] + 1);
  Return[position]
  ]

(* This function deletes a disk from a list of pieces if a point is in the \
piece *)
addAndDeleteShape[point_, disks_, player_] := 
 Module[{newDiskList, deletedPiece, newDisks = disks},
  (* Selects where diskList has shape that does not contain point *)
  
  newDiskList = Select[newDisks, ! isIn[point, #] &];
  (* deletedPiece is the removed slot *)
  
  deletedPiece = Flatten[Select[newDisks, isIn[point, #] &]];
  (* Checks if there is a deleted piece *)
  If[deletedPiece != {},
   (* Checks if the piece that the player wants to play on is white (empty \
slot) *)
   If[SameQ[deletedPiece[[1]], White],
    (* Checks player number and changes color accordingly and inserts in \
proper location *)
    If[player == 1,
     newDiskList = 
      Insert[newDiskList, changeColor[deletedPiece, player1Color], 
       locationToBeInserted[deletedPiece]],
     newDiskList = 
      Insert[newDiskList, changeColor[deletedPiece, player2Color], 
       locationToBeInserted[deletedPiece]]
     ],
    (* Adds deletedPiece back to newDiskList if player selects on non white \
piece *)
    
    newDiskList = 
     Insert[newDiskList, deletedPiece, locationToBeInserted[deletedPiece]]
    ]
   ];
  Return[newDiskList]
  ]

(* These are all of the arrows that need to be displayed to rotate the board *)

arrowsToDisplay[] :=
 {Arrow[{{0, 6.1}, {0.8, 6.5}}], 
  Arrow[{{0, 6.1}, {-0.8, 5.7}}], Arrow[{{6, 6.1}, {5.2, 6.5}}], 
  Arrow[{{6, 6.1}, {6.8, 5.7}}], Arrow[{{6, -0.1}, {6.8, 0.3}}], 
  Arrow[{{6, -0.1}, {5.2, -0.5}}], Arrow[{{0, -0.1}, {-0.8, 0.3}}], 
  Arrow[{{0, -0.1}, {0.8, -0.5}}]}

(* This function returns True if all elements in a list have the same color \
specified *)

sameColor[listOfDisks_, color_] :=
 
 Return[AllTrue[{listOfDisks[[1]], listOfDisks[[2]], listOfDisks[[3]], 
    listOfDisks[[4]], listOfDisks[[5]]}, SameQ[#[[1]], color] &]]

(* This function returns True if a player makes 5 in a row, False otherwise *)

isGameOver[listOfDisks_] := Module[{i},
  (* Goes through each elem of listOfDisks *)
  
  For[i = 1, i <= Length[listOfDisks], i++,
   (* Checks combinations of 5 that are possible *)
   
   If[MemberQ[{1, 2, 7, 8, 13, 14, 19, 20, 25, 26, 31, 32}, i],
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 1]], 
       listOfDisks[[i + 2]], listOfDisks[[i + 3]], listOfDisks[[i + 4]]},  
      player1Color],
     Return[{True, 1}]];
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 1]], 
       listOfDisks[[i + 2]], listOfDisks[[i + 3]], listOfDisks[[i + 4]]}, 
      player2Color],
     Return[{True, 2}]];
    ];
   If[MemberQ[{5, 6, 11, 12}, i],
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 5]], 
       listOfDisks[[i + 10]], listOfDisks[[i + 15]], listOfDisks[[i + 20]]},  
      player1Color],
     Return[{True, 1}]];
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 5]], 
       listOfDisks[[i + 10]], listOfDisks[[i + 15]], listOfDisks[[i + 20]]}, 
      player2Color],
     Return[{True, 2}]];
    ];
   If[MemberQ[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, i],
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 6]], 
       listOfDisks[[i + 12]], listOfDisks[[i + 18]], listOfDisks[[i + 24]]},  
      player1Color],
     Return[{True, 1}]];
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 6]], 
       listOfDisks[[i + 12]], listOfDisks[[i + 18]], listOfDisks[[i + 24]]}, 
      player2Color],
     Return[{True, 2}]]
    ];
   If[MemberQ[{1, 2, 7, 8}, i], 
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 7]], 
       listOfDisks[[i + 14]], listOfDisks[[i + 21]], listOfDisks[[i + 28]]},  
      player1Color],
     Return[{True, 1}]];
    If[sameColor[{listOfDisks[[i]], listOfDisks[[i + 7]], 
       listOfDisks[[i + 14]], listOfDisks[[i + 21]], listOfDisks[[i + 28]]}, 
      player2Color],
     Return[{True, 2}]]
    ]
   ];
  Return[{False, 0}]
  ]


(* This function rotates the top left square of the gameboard left *)

rotateTileLeftTL[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[4, 1]] = listOfDisks[[6, 1]];
  diskLst[[5, 1]] = listOfDisks[[12, 1]];
  diskLst[[6, 1]] = listOfDisks[[18, 1]];
  diskLst[[12, 1]] = listOfDisks[[17, 1]];
  diskLst[[18, 1]] = listOfDisks[[16, 1]];
  diskLst[[17, 1]] = listOfDisks[[10, 1]];
  diskLst[[16, 1]] = listOfDisks[[4, 1]];
  diskLst[[10, 1]] = listOfDisks[[5, 1]];
  Return[diskLst]
  ]

(* This function rotates the top right square of the gameboard left *)

rotateTileLeftTR[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[24, 1]] = listOfDisks[[36, 1]];
  diskLst[[23, 1]] = listOfDisks[[30, 1]];
  diskLst[[22, 1]] = listOfDisks[[24, 1]];
  diskLst[[28, 1]] = listOfDisks[[23, 1]];
  diskLst[[34, 1]] = listOfDisks[[22, 1]];
  diskLst[[35, 1]] = listOfDisks[[28, 1]];
  diskLst[[36, 1]] = listOfDisks[[34, 1]];
  diskLst[[30, 1]] = listOfDisks[[35, 1]];
  Return[diskLst]
  ]


(* This function rotates the bottom left square of the gameboard left *)

rotateTileLeftBL[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  diskLst[[3, 1]] = listOfDisks[[15, 1]];
  diskLst[[2, 1]] = listOfDisks[[9, 1]];
  diskLst[[1, 1]] = listOfDisks[[3, 1]];
  diskLst[[7, 1]] = listOfDisks[[2, 1]];
  diskLst[[13, 1]] = listOfDisks[[1, 1]];
  diskLst[[14, 1]] = listOfDisks[[7, 1]];
  diskLst[[15, 1]] = listOfDisks[[13, 1]];
  diskLst[[9, 1]] = listOfDisks[[14, 1]];
  Return[diskLst]
  ]

(* This function rotates the bottom right square of the gameboard left *)

rotateTileLeftBR[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[21, 1]] =  listOfDisks[[33, 1]];
  diskLst[[20, 1]] = listOfDisks[[27, 1]];
  diskLst[[19, 1]] = listOfDisks[[21, 1]];
  diskLst[[25, 1]] = listOfDisks[[20, 1]];
  diskLst[[31, 1]] = listOfDisks[[19, 1]];
  diskLst[[32, 1]] = listOfDisks[[25, 1]];
  diskLst[[33, 1]] = listOfDisks[[31, 1]];
  diskLst[[27, 1]] = listOfDisks[[32, 1]];
  Return[diskLst]
  ]

(* This function rotates the top left square of the gameboard right *)

rotateTileRightTL[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[6, 1]] = listOfDisks[[4, 1]];
  diskLst[[5, 1]] = listOfDisks[[10, 1]];
  diskLst[[4, 1]] = listOfDisks[[16, 1]];
  diskLst[[10, 1]] = listOfDisks[[17, 1]];
  diskLst[[16, 1]] = listOfDisks[[18, 1]];
  diskLst[[17, 1]] = listOfDisks[[12, 1]];
  diskLst[[18, 1]] = listOfDisks[[6, 1]];
  diskLst[[12, 1]] = listOfDisks[[5, 1]];
  Return[diskLst]
  ]

(* This function rotates the bottom left square of the gameboard right *)

rotateTileRightBL[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[3, 1]] = listOfDisks[[1, 1]];
  diskLst[[2, 1]] = listOfDisks[[7, 1]];
  diskLst[[1, 1]] = listOfDisks[[13, 1]];
  diskLst[[7, 1]] = listOfDisks[[14, 1]];
  diskLst[[13, 1]] = listOfDisks[[15, 1]];
  diskLst[[14, 1]] = listOfDisks[[9, 1]];
  diskLst[[15, 1]] = listOfDisks[[3, 1]];
  diskLst[[9, 1]] = listOfDisks[[2, 1]];
  Return[diskLst]
  ]

(* This function rotates the top right square of the gameboard right *)

rotateTileRightTR[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[24, 1]] = listOfDisks[[22, 1]];
  diskLst[[23, 1]] = listOfDisks[[28, 1]];
  diskLst[[22, 1]] = listOfDisks[[34, 1]];
  diskLst[[28, 1]] = listOfDisks[[35, 1]];
  diskLst[[34, 1]] = listOfDisks[[36, 1]];
  diskLst[[35, 1]] = listOfDisks[[30, 1]];
  diskLst[[36, 1]] = listOfDisks[[24, 1]];
  diskLst[[30, 1]] = listOfDisks[[23, 1]];
  Return[diskLst]
  ]

(* This function rotates the bottom right square of the gameboard right *)

rotateTileRightBR[listOfDisks_] := Module[{diskLst = listOfDisks},
  (* Changes color of disks needed *)
  
  diskLst[[21, 1]] = listOfDisks[[19, 1]];
  diskLst[[20, 1]] = listOfDisks[[25, 1]];
  diskLst[[19, 1]] = listOfDisks[[31, 1]];
  diskLst[[25, 1]] = listOfDisks[[32, 1]];
  diskLst[[31, 1]] = listOfDisks[[33, 1]];
  diskLst[[32, 1]] = listOfDisks[[27, 1]];
  diskLst[[33, 1]] = listOfDisks[[21, 1]];
  diskLst[[27, 1]] = listOfDisks[[20, 1]];
  Return[diskLst]
  ]

(* This function is the gameboard for the game *)

gameBoardFor2Player[] := DynamicModule[
  {oldPieces, arrow1 = {{White, arrowsToDisplay[][[1]]}}, 
   arrow2 = {{White, arrowsToDisplay[][[2]]}}, 
   arrow3 = {{White, arrowsToDisplay[][[3]]}}, 
   arrow4 = {{White, arrowsToDisplay[][[4]]}}, 
   arrow5 = {{White, arrowsToDisplay[][[5]]}}, 
   arrow6 = {{White, arrowsToDisplay[][[6]]}}, 
   arrow7 = {{White, arrowsToDisplay[][[7]]}}, 
   arrow8 = {{White, arrowsToDisplay[][[8]]}}, gameWinner, playable = True},
  (* ClickPane needs to be Dynamic *)
  Dynamic@
   ClickPane[
    (* event handler is used s.t. 
    when you click on an arrow all of them disappear *)
    Graphics[
     {gameBoardBackground[], dividerLines[], pieces,
      (* make all arrow lists empty to delete them all when clicked on one *)

            EventHandler[arrow1,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightTL[pieces]
          )
        }
       ],
      EventHandler[arrow2,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftTL[pieces]
          )
        }
       ],
      EventHandler[arrow3,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftTR[pieces]
          )
        }
       ],
      EventHandler[arrow4,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightTR[pieces]
          )
        }
       ],
      EventHandler[arrow5,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftBR[pieces]
          )
        }
       ],
      EventHandler[arrow6,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightBR[pieces]
          )
        }
       ],
      EventHandler[arrow7,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightBL[pieces]
          )
        }
       ],
      EventHandler[arrow8,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftBL[pieces]
          )
        }
       ]
      }
     ],
    (If[playable,
       (* If count is even then it is player 1 turn *)
       
       If[EvenQ[count],
        oldPieces = pieces;
        (* If the clicked point is in a certain location, 
        then change the proper list *)
        
        pieces = addAndDeleteShape[#, pieces, 1];
        (* If pieces and oldPieces are the same then do not to change player, 
        player made bad move otherwise increment count and add arrows *)
     
           If[! SameQ[pieces, oldPieces],
         count++;
         (* Display all arrows *)
         arrow1 = arrowsToDisplay[][[1]];
         arrow2 = arrowsToDisplay[][[2]];
         arrow3 = arrowsToDisplay[][[3]];
         arrow4 = arrowsToDisplay[][[4]];
         arrow5 = arrowsToDisplay[][[5]];
         arrow6 = arrowsToDisplay[][[6]];
         arrow7 = arrowsToDisplay[][[7]];
         arrow8 = arrowsToDisplay[][[8]];
         playable = False;
         ],
        oldPieces = pieces;
        pieces = addAndDeleteShape[#, pieces, 2];
        If[! SameQ[pieces, oldPieces],
         count++;
         (* Display all arrows *)
         arrow1 = arrowsToDisplay[][[1]];
         arrow2 = arrowsToDisplay[][[2]];
         arrow3 = arrowsToDisplay[][[3]];
         arrow4 = arrowsToDisplay[][[4]];
         arrow5 = arrowsToDisplay[][[5]];
         arrow6 = arrowsToDisplay[][[6]];
         arrow7 = arrowsToDisplay[][[7]];
         arrow8 = arrowsToDisplay[][[8]];
         playable = False;
         ]
        ];
       (* Checks if game is over *)
       If[isGameOver[pieces][[1]],
        (* Checks who made last move and displays who wins *)
        
        gameWinner = isGameOver[pieces][[2]];
        (* Creates message saying who wins *)
        
        CreatePalette[{"   Player " <> ToString[gameWinner] <> " wins!", 
          DefaultButton[]}, 
         WindowMargins -> {{Automatic, Automatic}, {Automatic, Automatic}},
         WindowTitle -> "Game Over"]
        ];
       ]
      ) &
    ]
  ]

1 Player Mode

Code for AI

(* This function returns all the slots that the computer can play in *)

emptySlots[diskList_] :=
 
 Return[Select[diskList, getColorDisk[#] === White &]]

(* This function returns all possible moves that a player can make *)

allMovesPossibilities[diskList_, player_] := 
 Module[{newDiskList = diskList, newDiskList2 = diskList, 
   rotationPossibilities = {}, i, possible},
  (* This loop goes through each element in diskList *)
  
  For[i = 1, i <= Length[diskList], i++,
   (* Adds a new disk for each possibility of player move *)
   
   newDiskList = 
    addAndDeleteShape[getCenterDisk[diskList[[i]]], diskList, player];
   (* Finds all possible moves when each disk inserted *)
   
   AppendTo[rotationPossibilities, rotateTileLeftBL[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileRightBL[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileLeftBR[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileRightBR[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileLeftTR[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileRightTR[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileLeftTL[newDiskList]];
   AppendTo[rotationPossibilities, rotateTileRightTL[newDiskList]];
   ];
  (* Gets all the possible moves and returns the list *)
  
  Return[rotationPossibilities]
  ]

(* Rotates a random tile a random direction *)

rotateRandomTileDir[pieces_] := Module[{randomValue = RandomInteger[7]},
  (* Checks the random values *)
  If[randomValue == 7,
   Return[rotateTileLeftBL[pieces]],
   If[randomValue == 6,
    Return[rotateTileRightBL[pieces]],
    If[randomValue == 5,
     Return[rotateTileLeftTL[pieces]],
     If[randomValue == 4,
      Return[rotateTileRightTL[pieces]],
      If[randomValue == 3,
       Return[rotateTileLeftTR[pieces]],
       If[randomValue == 2,
        Return[rotateTileRightTR[pieces]],
        If[randomValue == 1,
         Return[rotateTileLeftBR[pieces]],
         Return[rotateTileRightBR[pieces]]
         ]
        ]
       ]
      ]
     ]
    ]
   ]
  ]

(* This function returns 0,1,2,3,4 depending on which Triple Play is possible \
*)
triplePossible[diskList_, player_] := 
 Module[{firstPositions = {12, 17, 22, 27, 32}, 
   secondPositions = {2, 9, 16, 23, 30}, thirdPositions = {5, 10, 15, 20, 25},
    fourthPositions = {7, 14, 21, 28, 35}, col},
  If[player == 1,
   col = player2Color,
   col = player1Color];
  (* Checks possible ways to make this combination *)
  
  If[AllTrue[diskList[[firstPositions]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[firstPositions, {3}], 24]]], #[[1]] =!= col &] || 
    AllTrue[diskList[[
      Append[Delete[firstPositions, {3}], 34]]], #[[1]] =!= col &],
   Return[1]
   ];
  If[AllTrue[diskList[[secondPositions]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[secondPositions, {3}], 4]]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[secondPositions, {3}], 18]]], #[[1]] =!= col &],
   Return[2]
   ];
  If[AllTrue[diskList[[thirdPositions]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[thirdPositions, {3}], 3]]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[thirdPositions, {3}], 13]]], #[[1]] =!= col &],
   Return[3]
   ];
  If[AllTrue[diskList[[fourthPositions]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[fourthPositions, {3}], 19]]], #[[1]] =!= col &] ||
    
    AllTrue[diskList[[
      Append[Delete[fourthPositions, {3}], 27]]], #[[1]] =!= col &],
   Return[4]
   ];
  Return[0]
  ]

(* This function plays the triple move that is possible by the AI *)

addTripleMove[diskList_, player_] := 
 Module[{newDiskList = diskList, selectable},
  (* First move possible *)
  If[triplePossible[diskList, player] == 1,
   (* Checks to see which version to play *)
   
   If[! AllTrue[{diskList[[12]], diskList[[17]], diskList[[27]], 
       diskList[[32]]}, getColorDisk[#] =!= White &],
    selectable = 
     Select[{diskList[[12]], diskList[[17]], diskList[[27]], diskList[[32]]}, 
      getColorDisk[#] === White &];
    If[selectable != {},
     newDiskList = 
      addAndDeleteShape[getCenterDisk[RandomChoice[selectable]], newDiskList, 
       2],
     If[getColorDisk[diskList[[22]]] === White,
      newDiskList = 
       addAndDeleteShape[getCenterDisk[diskList[[22]]], newDiskList, 2],
      If[getColorDisk[diskList[[24]]] === White,
       newDiskList = 
        addAndDeleteShape[getCenterDisk[diskList[[24]]], newDiskList, 2],
       If[getColorDisk[diskList[[34]] === White],
        newDiskList = 
         addAndDeleteShape[getCenterDisk[diskList[[34]]], newDiskList, 2]
        ]
       ]
      ]
     ]
    ]
   ];
  (* Second move possible *)
  If[triplePossible[diskList, player] == 2,
   (* Checks to see which version to play *)
   
   If[! AllTrue[{diskList[[2]], diskList[[9]], diskList[[23]], 
       diskList[[30]]}, getColorDisk[#] =!= White &],
    selectable = 
     Select[{diskList[[2]], diskList[[9]], diskList[[23]], diskList[[30]]}, 
      getColorDisk[#] === White &];
    If[selectable != {},
     newDiskList = 
      addAndDeleteShape[getCenterDisk[RandomChoice[selectable]], newDiskList, 
       2],
     If[getColorDisk[diskList[[16]]] === White,
      newDiskList = 
       addAndDeleteShape[getCenterDisk[diskList[[22]]], newDiskList, 2],
      If[getColorDisk[diskList[[18]]] === White,
       newDiskList = 
        addAndDeleteShape[getCenterDisk[diskList[[24]]], newDiskList, 2],
       If[getColorDisk[diskList[[4]] === White],
        newDiskList = 
         addAndDeleteShape[getCenterDisk[diskList[[34]]], newDiskList, 2]
        ]
       ]
      ]
     ]
    ]
   ];
  (* Second move possible *)
  If[triplePossible[diskList, player] == 3,
   (* Checks to see which version to play *)
   
   If[! AllTrue[{diskList[[5]], diskList[[10]], diskList[[20]], 
       diskList[[25]]}, getColorDisk[#] =!= White &],
    selectable = 
     Select[{diskList[[5]], diskList[[10]], diskList[[20]], diskList[[25]]}, 
      getColorDisk[#] === White &];
    If[selectable != {},
     newDiskList = 
      addAndDeleteShape[getCenterDisk[RandomChoice[selectable]], newDiskList, 
       2],
     If[getColorDisk[diskList[[15]]] === White,
      newDiskList = 
       addAndDeleteShape[getCenterDisk[diskList[[15]]], newDiskList, 2],
      If[getColorDisk[diskList[[3]]] === White,
       newDiskList = 
        addAndDeleteShape[getCenterDisk[diskList[[3]]], newDiskList, 2],
       If[getColorDisk[diskList[[13]] === White],
        newDiskList = 
         addAndDeleteShape[getCenterDisk[diskList[[13]]], newDiskList, 2]
        ]
       ]
      ]
     ]
    ]
   ];
  (* Second move possible *)
  If[triplePossible[diskList, player] == 4,
   (* Checks to see which version to play *)
   
   If[! AllTrue[{diskList[[7]], diskList[[14]], diskList[[28]], 
       diskList[[35]]}, getColorDisk[#] =!= White &],
    selectable = 
     Select[{diskList[[7]], diskList[[14]], diskList[[28]], diskList[[35]]}, 
      getColorDisk[#] === White &];
    If[selectable != {},
     newDiskList = 
      addAndDeleteShape[getCenterDisk[RandomChoice[selectable]], newDiskList, 
       2],
     If[getColorDisk[diskList[[21]]] === White,
      newDiskList = 
       addAndDeleteShape[getCenterDisk[diskList[[22]]], newDiskList, 2],
      If[getColorDisk[diskList[[19]]] === White,
       newDiskList = 
        addAndDeleteShape[getCenterDisk[diskList[[24]]], newDiskList, 2],
       If[getColorDisk[diskList[[27]] === White],
        newDiskList = 
         addAndDeleteShape[getCenterDisk[diskList[[34]]], newDiskList, 2]
        ]
       ]
      ]
     ]
    ]
   ];
  Return[newDiskList]
  ]

(* This function returns true if the player can place a piece in the middle \
spot of any tile *)

isMiddleSpotPossible[diskList_] :=
 Return[Select[emptySlots[diskList],
    # == {White, Disk[{1.5, 1.5}, 0.2]} || # == {White, 
        Disk[{1.5, 4.5}, 0.2]} || # == {White, 
        Disk[{4.5, 1.5}, 0.2]} || # == {White, 
        Disk[{4.5, 4.5}, 0.2]} &] != {}]

(* This function plays the middle spot *)

playMiddleSpot[diskList_, player_] :=
 If[isMiddleSpotPossible[diskList],
  Return[rotateRandomTileDir[
    addAndDeleteShape[getCenterDisk[RandomChoice[Select[emptySlots[diskList],
        # == {White, Disk[{1.5, 1.5}, 0.2]} || # == {White, 
            Disk[{1.5, 4.5}, 0.2]} || # == {White, 
            Disk[{4.5, 1.5}, 0.2]} || # == {White, 
            Disk[{4.5, 4.5}, 0.2]} &]]], diskList, player]]]]

(* This function returns scores for all possible moves *)

scoreCalculator[diskList_, player_] := 
 Module[{i, otherPlayer, 
   possibleMoves = allMovesPossibilities[diskList, player], 
   otherPlayerPossibleMoves, listScores = {}},
  (* Finds players *)
  If[player == 1,
   otherPlayer = 2,
   otherPlayer = 1
   ];
  otherPlayerPossibleMoves = allMovesPossibilities[diskList, otherPlayer];
  (* Goes through each element in the list *)
  
  For[i = 1, i <= Length[possibleMoves], i++,
   (* If game can be finished give score of 6 *)
   
   If[isGameOver[possibleMoves[[i]]][[1]],
    AppendTo[listScores, {6, i}],
    (* If blocks opponent give score of 5 *)
    
    If[isGameOver[otherPlayerPossibleMoves[[i]]][[1]],
     AppendTo[listScores, {5, i}],
     (* If possible to play in middle locations give score of 4 *)
     
     If[possibleMoves[[i]] === playBlockPosition[diskList, player],
      AppendTo[listScores, {4, i}],
      (* If middle spot play possible give score of 3 *)
      
      If[possibleMoves[[i]] === playMiddleSpot[diskList, player],
       AppendTo[listScores, {3, i}],
       (* If triple move possible to play give score of 2 *)
       
       If[possibleMoves[[i]] === addTripleMove[diskList, player],
        AppendTo[listScores, {2, i}],
        (* Else give score of 1 *)
        
        AppendTo[listScores, {1, 
           RandomInteger[{1, Length[possibleMoves]}]}];]]]
     ]
    ]
   ];
  Return[listScores]
  ]

(* This function plays the best move possible *)

playBestMove[diskList_, player_] := 
 Module[{listOfScores = scoreCalculator[diskList, player], maxScorePosition},
  maxScorePosition = 
   Select[Position[listOfScores, 
     Max[listOfScores[[All, 1]]]], #[[2]] == 1 &];
  Return[allMovesPossibilities[diskList, player][[
    listOfScores[[maxScorePosition[[All, 1]][[1]]]][[2]]]]]
  ]


(* Returns position to block a 2 way win possibility *)

positionToBlock2Way[diskList_, player_] := Module[{col},
  If[player == 1,
   col = player2Color,
   col = player1Color
   ];
  (* Checks all the possibilities *)
  
  If[getColorDisk[diskList[[8]]] === getColorDisk[diskList[[15]]] === 
     getColorDisk[diskList[[29]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[22]]],
   Return[22]];
  If[getColorDisk[diskList[[8]]] === getColorDisk[diskList[[9]]] === 
     getColorDisk[diskList[[11]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[10]]],
   Return[10]]; 
  If[getColorDisk[diskList[[8]]] === getColorDisk[diskList[[14]]] === 
     getColorDisk[diskList[[26]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[20]]],
   Return[20]]; 
  If[getColorDisk[diskList[[28]]] === getColorDisk[diskList[[29]]] === 
     getColorDisk[diskList[[26]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[27]]],
   Return[27]]; 
  If[getColorDisk[diskList[[23]]] === getColorDisk[diskList[[29]]] === 
     getColorDisk[diskList[[11]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[17]]],
   Return[17]]; 
  If[getColorDisk[diskList[[29]]] === getColorDisk[diskList[[22]]] === 
     getColorDisk[diskList[[8]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[15]]],
   Return[15]]; 
  If[getColorDisk[diskList[[10]]] === getColorDisk[diskList[[11]]] === 
     getColorDisk[diskList[[8]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[9]]],
   Return[9]]; 
  If[getColorDisk[diskList[[11]]] === getColorDisk[diskList[[17]]] === 
     getColorDisk[diskList[[29]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[23]]],
   Return[23]]; 
  If[getColorDisk[diskList[[11]]] === getColorDisk[diskList[[16]]] === 
     getColorDisk[diskList[[26]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[21]]],
   Return[21]]; 
  If[getColorDisk[diskList[[26]]] === getColorDisk[diskList[[27]]] === 
     getColorDisk[diskList[[29]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[28]]],
   Return[28]]; 
  If[getColorDisk[diskList[[20]]] === getColorDisk[diskList[[26]]] === 
     getColorDisk[diskList[[8]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[14]]],
   Return[14]]; 
  If[getColorDisk[diskList[[21]]] === getColorDisk[diskList[[26]]] === 
     getColorDisk[diskList[[11]]] === col && 
    MemberQ[emptySlots[diskList], diskList[[16]]],
   Return[16],
   Return[0]
   ]
  ]

(* Plays position so that player cannot get 5 in a row guaranteed *)

playBlockPosition[diskList_, player_] := Module[{},
  If[positionToBlock2Way[diskList, player] != 0,
   Return[addAndDeleteShape[
     getCenterDisk[diskList[[positionToBlock2Way[diskList, player]]]], 
     diskList, player]]
   ]
  ]

(* This function is the gameboard for the game *)

gameBoardForAI[] := DynamicModule[
  {oldPieces, arrow1 = {{White, arrowsToDisplay[][[1]]}}, 
   arrow2 = {{White, arrowsToDisplay[][[2]]}}, 
   arrow3 = {{White, arrowsToDisplay[][[3]]}}, 
   arrow4 = {{White, arrowsToDisplay[][[4]]}}, 
   arrow5 = {{White, arrowsToDisplay[][[5]]}}, 
   arrow6 = {{White, arrowsToDisplay[][[6]]}}, 
   arrow7 = {{White, arrowsToDisplay[][[7]]}}, 
   arrow8 = {{White, arrowsToDisplay[][[8]]}}, gameWinner, playable = True, 
   randomAIChoice = RandomInteger[7]},
  (* ClickPane needs to be Dynamic *)
  Dynamic@
   ClickPane[
    (* event handler is used s.t. 
    when you click on an arrow all of them disappear *)
    Graphics[
     {gameBoardBackground[], dividerLines[], pieces,
      (* make all arrow lists empty to delete them all when clicked on one *)

            EventHandler[arrow1,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightTL[pieces]
          )
        }
       ],
      EventHandler[arrow2,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftTL[pieces]
          )
        }
       ],
      EventHandler[arrow3,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftTR[pieces]
          )
        }
       ],
      EventHandler[arrow4,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightTR[pieces]
          )
        }
       ],
      EventHandler[arrow5,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftBR[pieces]
          )
        }
       ],
      EventHandler[arrow6,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightBR[pieces]
          )
        }
       ],
      EventHandler[arrow7,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileRightBL[pieces]
          )
        }
       ],
      EventHandler[arrow8,
       {"MouseClicked" :> 
         (arrow1 = {{White, arrowsToDisplay[][[1]]}}; 
          arrow2 = {{White, arrowsToDisplay[][[2]]}}; 
          arrow3 = {{White, arrowsToDisplay[][[3]]}}; 
          arrow4 = {{White, arrowsToDisplay[][[4]]}}; 
          arrow5 = {{White, arrowsToDisplay[][[5]]}}; 
          arrow6 = {{White, arrowsToDisplay[][[6]]}}; 
          arrow7 = {{White, arrowsToDisplay[][[7]]}}; 
          arrow8 = {{White, arrowsToDisplay[][[8]]}};
          playable = True;
          pieces = rotateTileLeftBL[pieces]
          )
        }
       ]
      }
     ],
    ((* Checks if game is over *)
      If[isGameOver[pieces][[1]],
       (* Checks who made last move and displays who wins *)
       
       gameWinner = isGameOver[pieces][[2]];
       (* Creates message saying who wins *)
       
       CreatePalette[{"   Player " <> ToString[gameWinner] <> " wins!", 
         DefaultButton[]}, 
        WindowMargins -> {{Automatic, Automatic}, {Automatic, Automatic}},
        WindowTitle -> "Game Over"]
       ];
      (* Needs to playable in order to play move *)
      If[playable,
       (* If count is even then it is player 1 turn *)
       
       If[EvenQ[count],
        oldPieces = pieces;
        (* If the clicked point is in a certain location, 
        then change the proper list *)
        
        pieces = addAndDeleteShape[#, pieces, 1];
        (* If pieces and oldPieces are the same then do not to change player, 
        player made bad move otherwise increment count and add arrows *)
     \
   (* Checks if game is over *)
        If[isGameOver[pieces][[1]],
         (* Checks who made last move and displays who wins *)
         
         gameWinner = isGameOver[pieces][[2]];
         (* Creates message saying who wins *)
         
         CreatePalette[{"   Player " <> ToString[gameWinner] <> " wins!", 
           DefaultButton[]}, 
          WindowMargins -> {{Automatic, Automatic}, {Automatic, Automatic}},
          WindowTitle -> "Game Over"]
         ];
        (* If pieces and oldPieces are the same, 
        then player made invalid move *)
        If[! SameQ[pieces, oldPieces],
         count++;
         (* Display all arrows *)
         arrow1 = arrowsToDisplay[][[1]];
         arrow2 = arrowsToDisplay[][[2]];
         arrow3 = arrowsToDisplay[][[3]];
         arrow4 = arrowsToDisplay[][[4]];
         arrow5 = arrowsToDisplay[][[5]];
         arrow6 = arrowsToDisplay[][[6]];
         arrow7 = arrowsToDisplay[][[7]];
         arrow8 = arrowsToDisplay[][[8]];
         playable = False;
         ],
        (* If count is odd, then it is AI's turn to play *)
        (* 
        If there is a way for the AI to win, then play that move *)
        
        If[OddQ[count],
         pieces = playBestMove[pieces, 2];
         (* Checks if game is over *)
         If[isGameOver[pieces][[1]],
          (* Checks who made last move and displays who wins *)
          
          gameWinner = isGameOver[pieces][[2]];
          (* Creates message saying who wins *)
          
          CreatePalette[{"   Player " <> ToString[gameWinner] <> " wins!", 
            DefaultButton[]}, 
           WindowMargins -> {{Automatic, Automatic}, {Automatic, Automatic}},
           WindowTitle -> "Game Over"]
          ];
         count++
         ]
        ]
       ]
      ) &
    ]
  ]
